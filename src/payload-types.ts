/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    themeConfig: ThemeConfig;
    header: Header;
    footer: Footer;
  };
  globalsSelect: {
    themeConfig: ThemeConfigSelect<false> | ThemeConfigSelect<true>;
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
  };
  locale: 'en' | 'de';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  hero: Hero;
  layout: (
    | FeatureBlock
    | ArchiveBlock
    | FormBlock
    | CtaBlock
    | LogosBlock
    | AboutBlock
    | ContactBlock
    | GalleryBlock
    | TestimonialBlock
    | FaqBlock
    | StatBlock
    | SplitViewBlock
    | TextBlock
    | MediaBlock
    | CustomBlock
  )[];
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero".
 */
export interface Hero {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion:
    | 'none'
    | '1'
    | '2'
    | '3'
    | '4'
    | '5'
    | '6'
    | '7'
    | '8'
    | '9'
    | '10'
    | '11'
    | '12'
    | '13'
    | '14'
    | '15'
    | '16'
    | '18'
    | '20'
    | '21'
    | '24'
    | '25'
    | '26'
    | '27'
    | '28'
    | '29'
    | '30'
    | '31'
    | '32'
    | '33'
    | '34'
    | '35'
    | '36'
    | '37'
    | '38'
    | '39'
    | '40'
    | '45'
    | '50'
    | '51'
    | '53'
    | '55'
    | '57';
  badge?: string | null;
  badgeIcon?: string | null;
  tagline?: string | null;
  badgeLink?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    iconBefore?: string | null;
    iconAfter?: string | null;
  };
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  images?: (string | Media)[] | null;
  icons?: (string | Media)[] | null;
  USPs?: {
    icon?: (string | null) | Media;
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
  };
  pricing?: {
    headline?: string | null;
    price?: string | null;
    description?: string | null;
  };
  rating?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock".
 */
export interface FeatureBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion:
    | 'FEATURE1'
    | 'FEATURE2'
    | 'FEATURE3'
    | 'FEATURE4'
    | 'FEATURE5'
    | 'FEATURE6'
    | 'FEATURE7'
    | 'FEATURE8'
    | 'FEATURE9'
    | 'FEATURE10'
    | 'FEATURE11'
    | 'FEATURE12'
    | 'FEATURE13'
    | 'FEATURE14'
    | 'FEATURE15'
    | 'FEATURE16'
    | 'FEATURE17'
    | 'FEATURE18'
    | 'FEATURE19'
    | 'FEATURE20'
    | 'FEATURE21'
    | 'FEATURE22'
    | 'FEATURE23'
    | 'FEATURE24'
    | 'FEATURE25'
    | 'FEATURE26'
    | 'FEATURE27'
    | 'FEATURE28'
    | 'FEATURE29'
    | 'FEATURE30'
    | 'FEATURE31'
    | 'FEATURE32'
    | 'FEATURE33'
    | 'FEATURE34'
    | 'FEATURE35'
    | 'FEATURE36'
    | 'FEATURE37'
    | 'FEATURE38'
    | 'FEATURE39'
    | 'FEATURE41'
    | 'FEATURE42'
    | 'FEATURE43'
    | 'FEATURE44'
    | 'FEATURE50'
    | 'FEATURE51'
    | 'FEATURE52'
    | 'FEATURE53'
    | 'FEATURE54'
    | 'FEATURE55'
    | 'FEATURE56'
    | 'FEATURE57'
    | 'FEATURE58'
    | 'FEATURE59'
    | 'FEATURE60'
    | 'FEATURE61'
    | 'FEATURE62'
    | 'FEATURE63'
    | 'FEATURE64'
    | 'FEATURE65'
    | 'FEATURE66'
    | 'FEATURE67'
    | 'FEATURE68'
    | 'FEATURE69'
    | 'FEATURE70'
    | 'FEATURE71'
    | 'FEATURE72'
    | 'FEATURE73'
    | 'FEATURE74'
    | 'FEATURE75'
    | 'FEATURE76'
    | 'FEATURE77'
    | 'FEATURE78'
    | 'FEATURE79'
    | 'FEATURE80'
    | 'FEATURE81'
    | 'FEATURE82'
    | 'FEATURE83'
    | 'FEATURE85'
    | 'FEATURE86'
    | 'FEATURE87'
    | 'FEATURE89'
    | 'FEATURE90'
    | 'FEATURE91'
    | 'FEATURE92'
    | 'FEATURE93'
    | 'FEATURE94'
    | 'FEATURE95'
    | 'FEATURE97'
    | 'FEATURE98'
    | 'FEATURE99'
    | 'FEATURE101'
    | 'FEATURE102'
    | 'FEATURE103'
    | 'FEATURE104'
    | 'FEATURE105'
    | 'FEATURE106'
    | 'FEATURE107'
    | 'FEATURE108'
    | 'FEATURE109'
    | 'FEATURE117'
    | 'FEATURE126';
  badge?: string | null;
  tagline?: string | null;
  icon?: string | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  image?: (string | null) | Media;
  USPs?:
    | {
        uspIcon?: string | null;
        tagline?: string | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * USPs can feature 1 or many features, with icon and richText
         */
        USPFeatures?:
          | {
              icon?: string | null;
              richText?: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              } | null;
              id?: string | null;
            }[]
          | null;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                section?: string | null;
                url?: string | null;
                label: string;
                iconBefore?: string | null;
                iconAfter?: string | null;
                /**
                 * Choose how the link should be rendered.
                 */
                appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
                size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
              };
              id?: string | null;
            }[]
          | null;
        /**
         * Single link for this USP. Icons might be set automatically, depending on the design version
         */
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
        };
        image?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'feature';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (string | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: string | Post;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  parent?: (string | null) | Category;
  breadcrumbs?:
    | {
        doc?: (string | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: string;
  title: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (string | Post)[] | null;
  categories?: (string | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (string | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (string | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  sub?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: string | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock".
 */
export interface CtaBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion:
    | 'CTA1'
    | 'CTA3'
    | 'CTA4'
    | 'CTA5'
    | 'CTA6'
    | 'CTA7'
    | 'CTA10'
    | 'CTA11'
    | 'CTA12'
    | 'CTA13'
    | 'CTA15'
    | 'CTA16'
    | 'CTA17';
  tagline?: string | null;
  icon?: string | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  image?: (string | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogosBlock".
 */
export interface LogosBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: 'LOGOS2' | 'LOGOS3';
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    label: string;
    iconBefore?: string | null;
    iconAfter?: string | null;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
    size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
  };
  logos: (string | Media)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'logos';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AboutBlock".
 */
export interface AboutBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: 'ABOUT1' | 'ABOUT2' | 'ABOUT3' | 'ABOUT4' | 'ABOUT5';
  headline?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  text1?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  text2?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  text3?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    label: string;
    iconBefore?: string | null;
    iconAfter?: string | null;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
    size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
  };
  images?: (string | Media)[] | null;
  logos?: (string | Media)[] | null;
  counter?:
    | {
        value: string;
        title: string;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'about';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactBlock".
 */
export interface ContactBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: 'CONTACT1' | 'CONTACT2' | 'CONTACT3' | 'CONTACT4';
  headlineAndDescription?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  contactBlocks?:
    | {
        icon?: string | null;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  maps?:
    | {
        iframe?: string | null;
        id?: string | null;
      }[]
    | null;
  form?: FormBlock[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contact';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock".
 */
export interface GalleryBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  /**
   * Choose the design version for this gallery block
   */
  designVersion?: ('GALLERY1' | 'GALLERY2' | 'GALLERY3' | 'GALLERY4' | 'GALLERY5' | 'GALLERY6') | null;
  /**
   * Optional heading and description for the gallery
   */
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tagline?: string | null;
  /**
   * Single link for this gallery. Might look best with arrowRight icon
   */
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    label: string;
    iconBefore?: string | null;
    iconAfter?: string | null;
  };
  /**
   * Add images to the gallery
   */
  elements?:
    | {
        image: string | Media;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'gallery';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock".
 */
export interface TestimonialBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion:
    | 'TESTIMONIAL1'
    | 'TESTIMONIAL2'
    | 'TESTIMONIAL3'
    | 'TESTIMONIAL4'
    | 'TESTIMONIAL6'
    | 'TESTIMONIAL7'
    | 'TESTIMONIAL8'
    | 'TESTIMONIAL9'
    | 'TESTIMONIAL10'
    | 'TESTIMONIAL11'
    | 'TESTIMONIAL12'
    | 'TESTIMONIAL13'
    | 'TESTIMONIAL14'
    | 'TESTIMONIAL15'
    | 'TESTIMONIAL16'
    | 'TESTIMONIAL17'
    | 'TESTIMONIAL18'
    | 'TESTIMONIAL19';
  headline?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tagline?: string | null;
  link?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    label: string;
    iconBefore?: string | null;
    iconAfter?: string | null;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
    size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
  };
  testimonial?:
    | {
        authorName?: string | null;
        authorDescription?: string | null;
        authorAvatar?: (string | null) | Media;
        icon?: (string | null) | Media;
        rating?: number | null;
        text?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonial';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FaqBlock".
 */
export interface FaqBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: 'FAQ1' | 'FAQ2' | 'FAQ3' | 'FAQ4' | 'FAQ5';
  badge?: string | null;
  headline?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  faqs?:
    | {
        question: string;
        answer?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  calloutText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  calloutLink?: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    section?: string | null;
    url?: string | null;
    label: string;
    iconBefore?: string | null;
    iconAfter?: string | null;
    /**
     * Choose how the link should be rendered.
     */
    appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
    size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'faq';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatBlock".
 */
export interface StatBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: 'STAT1' | 'STAT2' | 'STAT4' | 'STAT5' | 'STAT6' | 'STAT7' | 'STAT8';
  headline?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  stats?:
    | {
        counter: string;
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'stat';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SplitViewBlock".
 */
export interface SplitViewBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  columns?: (TextBlock | MediaBlock)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'splitView';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock".
 */
export interface TextBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  media: string | Media;
  caption?: string | null;
  aspectRatio?: ('16/9' | '4/3' | '1/1' | 'original') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomBlock".
 */
export interface CustomBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  customBlockType: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customblock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: string | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: string | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: string;
  form: string | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'pages';
    value: string | Page;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: string | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: string | Category;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: string | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?: T | HeroSelect<T>;
  layout?:
    | T
    | {
        feature?: T | FeatureBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        cta?: T | CtaBlockSelect<T>;
        logos?: T | LogosBlockSelect<T>;
        about?: T | AboutBlockSelect<T>;
        contact?: T | ContactBlockSelect<T>;
        gallery?: T | GalleryBlockSelect<T>;
        testimonial?: T | TestimonialBlockSelect<T>;
        faq?: T | FaqBlockSelect<T>;
        stat?: T | StatBlockSelect<T>;
        splitView?: T | SplitViewBlockSelect<T>;
        text?: T | TextBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        customblock?: T | CustomBlockSelect<T>;
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Hero_select".
 */
export interface HeroSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  badge?: T;
  badgeIcon?: T;
  tagline?: T;
  badgeLink?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        iconBefore?: T;
        iconAfter?: T;
      };
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  images?: T;
  icons?: T;
  USPs?:
    | T
    | {
        icon?: T;
        richText?: T;
      };
  pricing?:
    | T
    | {
        headline?: T;
        price?: T;
        description?: T;
      };
  rating?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeatureBlock_select".
 */
export interface FeatureBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  badge?: T;
  tagline?: T;
  icon?: T;
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  image?: T;
  USPs?:
    | T
    | {
        uspIcon?: T;
        tagline?: T;
        richText?: T;
        USPFeatures?:
          | T
          | {
              icon?: T;
              richText?: T;
              id?: T;
            };
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    section?: T;
                    url?: T;
                    label?: T;
                    iconBefore?: T;
                    iconAfter?: T;
                    appearance?: T;
                    size?: T;
                  };
              id?: T;
            };
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
            };
        image?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CtaBlock_select".
 */
export interface CtaBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  tagline?: T;
  icon?: T;
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  image?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LogosBlock_select".
 */
export interface LogosBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  richText?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        label?: T;
        iconBefore?: T;
        iconAfter?: T;
        appearance?: T;
        size?: T;
      };
  logos?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AboutBlock_select".
 */
export interface AboutBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  headline?: T;
  text1?: T;
  text2?: T;
  text3?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        label?: T;
        iconBefore?: T;
        iconAfter?: T;
        appearance?: T;
        size?: T;
      };
  images?: T;
  logos?: T;
  counter?:
    | T
    | {
        value?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContactBlock_select".
 */
export interface ContactBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  headlineAndDescription?: T;
  contactBlocks?:
    | T
    | {
        icon?: T;
        description?: T;
        id?: T;
      };
  maps?:
    | T
    | {
        iframe?: T;
        id?: T;
      };
  form?:
    | T
    | {
        formBlock?: T | FormBlockSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock_select".
 */
export interface GalleryBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  richText?: T;
  tagline?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        label?: T;
        iconBefore?: T;
        iconAfter?: T;
      };
  elements?:
    | T
    | {
        image?: T;
        richText?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock_select".
 */
export interface TestimonialBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  headline?: T;
  tagline?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        label?: T;
        iconBefore?: T;
        iconAfter?: T;
        appearance?: T;
        size?: T;
      };
  testimonial?:
    | T
    | {
        authorName?: T;
        authorDescription?: T;
        authorAvatar?: T;
        icon?: T;
        rating?: T;
        text?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FaqBlock_select".
 */
export interface FaqBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  badge?: T;
  headline?: T;
  faqs?:
    | T
    | {
        question?: T;
        answer?: T;
        id?: T;
      };
  calloutText?: T;
  calloutLink?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        section?: T;
        url?: T;
        label?: T;
        iconBefore?: T;
        iconAfter?: T;
        appearance?: T;
        size?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StatBlock_select".
 */
export interface StatBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  headline?: T;
  stats?:
    | T
    | {
        counter?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "SplitViewBlock_select".
 */
export interface SplitViewBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  columns?:
    | T
    | {
        text?: T | TextBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TextBlock_select".
 */
export interface TextBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  content?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  media?: T;
  caption?: T;
  aspectRatio?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CustomBlock_select".
 */
export interface CustomBlockSelect<T extends boolean = true> {
  backgroundColor?: T;
  customBlockType?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  sub?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * Theme configuration (For live preview config has to be saved)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "themeConfig".
 */
export interface ThemeConfig {
  id: string;
  radius?: string | null;
  regularColors?: {
    /**
     * The main background color of the website. Used for the overall page background and provides the base canvas for all content.
     */
    background?: string | null;
    /**
     * The primary text color used throughout the website. Provides optimal contrast against the background for readability.
     */
    foreground?: string | null;
    /**
     * Background color for card components. Used for elevated surfaces that contain grouped content.
     */
    card?: string | null;
    /**
     * Text color used within card components. Ensures readable content against the card background.
     */
    'card-foreground'?: string | null;
    /**
     * Background color for floating elements like dropdowns, tooltips, and popovers.
     */
    popover?: string | null;
    /**
     * Text color used within popover elements. Ensures content is readable against the popover background.
     */
    'popover-foreground'?: string | null;
    /**
     * Main brand color used for important interactive elements like primary buttons, links, and key UI components. This color should reflect your brand identity.
     */
    primary?: string | null;
    /**
     * Text color used on primary backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'primary-foreground'?: string | null;
    /**
     * Used for secondary UI elements and alternative actions. Provides visual hierarchy and contrast to primary elements.
     */
    secondary?: string | null;
    /**
     * Text color for secondary UI elements. Ensures readability while maintaining visual distinction from primary text.
     */
    'secondary-foreground'?: string | null;
    /**
     * Used for subtle background variations and disabled states. Creates visual depth without drawing attention.
     */
    muted?: string | null;
    /**
     * Used for less prominent text like placeholders and disabled content. Provides subtle contrast against the background.
     */
    'muted-foreground'?: string | null;
    /**
     * Used for highlighting and emphasizing specific UI elements. Adds visual interest and draws attention to important features.
     */
    accent?: string | null;
    /**
     * Text color used on accent backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'accent-foreground'?: string | null;
    /**
     * Used for destructive actions like deleting or removing content. Provides clear visual indication of potential negative consequences.
     */
    destructive?: string | null;
    /**
     * Text color used on destructive backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'destructive-foreground'?: string | null;
    /**
     * Used for borders and outlines of UI elements. Provides visual separation and definition.
     */
    border?: string | null;
    /**
     * Background color for input fields and text areas. Provides a clear and readable surface for user input.
     */
    input?: string | null;
    /**
     * Used for ring or glow effects around interactive elements. Provides visual feedback and emphasis.
     */
    ring?: string | null;
    /**
     * Used for success messages and positive feedback. Provides a clear visual indication of successful actions.
     */
    success?: string | null;
    /**
     * Used for warning messages and cautionary feedback. Provides a clear visual indication of potential issues.
     */
    warning?: string | null;
    /**
     * Used for error messages and critical feedback. Provides a clear visual indication of errors or problems.
     */
    error?: string | null;
    /**
     * Used for the first series of data in charts and graphs. Provides visual distinction and clarity.
     */
    'chart-1'?: string | null;
    /**
     * Used for the second series of data in charts and graphs. Provides visual distinction and clarity.
     */
    'chart-2'?: string | null;
    /**
     * Used for the third series of data in charts and graphs. Provides visual distinction and clarity.
     */
    'chart-3'?: string | null;
    /**
     * Used for the fourth series of data in charts and graphs. Provides visual distinction and clarity.
     */
    'chart-4'?: string | null;
    /**
     * Used for the fifth series of data in charts and graphs. Provides visual distinction and clarity.
     */
    'chart-5'?: string | null;
    /**
     * Used for subtle background variations and disabled states. Creates visual depth without drawing attention.
     */
    muted2?: string | null;
    /**
     * Used for less prominent text like placeholders and disabled content. Provides subtle contrast against the background.
     */
    'muted2-foreground'?: string | null;
  };
  darkmodeColors?: {
    enableDarkMode?: boolean | null;
    /**
     * The main background color of the website. Used for the overall page background and provides the base canvas for all content.
     */
    background?: string | null;
    /**
     * The primary text color used throughout the website. Provides optimal contrast against the background for readability.
     */
    foreground?: string | null;
    /**
     * Background color for card components. Used for elevated surfaces that contain grouped content.
     */
    card?: string | null;
    /**
     * Text color used within card components. Ensures readable content against the card background.
     */
    'card-foreground'?: string | null;
    /**
     * Background color for floating elements like dropdowns, tooltips, and popovers.
     */
    popover?: string | null;
    /**
     * Text color used within popover elements. Ensures content is readable against the popover background.
     */
    'popover-foreground'?: string | null;
    /**
     * Main brand color used for important interactive elements like primary buttons, links, and key UI components. This color should reflect your brand identity.
     */
    primary?: string | null;
    /**
     * Text color used on primary backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'primary-foreground'?: string | null;
    /**
     * Used for secondary UI elements and alternative actions. Provides visual hierarchy and contrast to primary elements.
     */
    secondary?: string | null;
    /**
     * Text color for secondary UI elements. Ensures readability while maintaining visual distinction from primary text.
     */
    'secondary-foreground'?: string | null;
    /**
     * Used for subtle background variations and disabled states. Creates visual depth without drawing attention.
     */
    muted?: string | null;
    /**
     * Used for less prominent text like placeholders and disabled content. Provides subtle contrast against the background.
     */
    'muted-foreground'?: string | null;
    /**
     * Used for highlighting and emphasizing specific UI elements. Adds visual interest and draws attention to important features.
     */
    accent?: string | null;
    /**
     * Text color used on accent backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'accent-foreground'?: string | null;
    /**
     * Used for destructive actions like deleting or removing content. Provides clear visual indication of potential negative consequences.
     */
    destructive?: string | null;
    /**
     * Text color used on destructive backgrounds. Ensures optimal contrast and readability for emphasized content.
     */
    'destructive-foreground'?: string | null;
    /**
     * Used for borders and outlines of UI elements. Provides visual separation and definition.
     */
    border?: string | null;
    /**
     * Background color for input fields and text areas. Provides a clear and readable surface for user input.
     */
    input?: string | null;
    /**
     * Used for ring or glow effects around interactive elements. Provides visual feedback and emphasis.
     */
    ring?: string | null;
    /**
     * Used for success messages and positive feedback. Provides a clear visual indication of successful actions.
     */
    success?: string | null;
    /**
     * Used for warning messages and cautionary feedback. Provides a clear visual indication of potential issues.
     */
    warning?: string | null;
    error?: string | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Theme configuration (For live preview config has to be saved)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion: '1' | '5';
  logo: string | Media;
  items?:
    | (
        | {
            icon?: string | null;
            label: string;
            subitems: {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                section?: string | null;
                url?: string | null;
                label: string;
                iconBefore?: string | null;
                iconAfter?: string | null;
              };
              Description?: string | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'sub';
          }
        | {
            link: {
              type?: ('reference' | 'custom') | null;
              newTab?: boolean | null;
              reference?: {
                relationTo: 'pages';
                value: string | Page;
              } | null;
              section?: string | null;
              url?: string | null;
              label: string;
              iconBefore?: string | null;
              iconAfter?: string | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'link';
          }
      )[]
    | null;
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
          iconBefore?: string | null;
          iconAfter?: string | null;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline' | 'inline' | 'destructive' | 'ghost' | 'secondary') | null;
          size?: ('default' | 'sm' | 'lg' | 'icon' | 'clear') | null;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Theme configuration (For live preview config has to be saved)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  designVersion?: ('1' | '2' | '3' | '4' | '5' | '6' | '7' | '8') | null;
  logo?: (string | null) | Media;
  copyright?: string | null;
  subline?: string | null;
  /**
   * Legal links like imprint, privacy policy, etc.
   */
  legalLinks?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          section?: string | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Add social media links with icons
   */
  socialLinks?:
    | {
        icon:
          | 'facebook'
          | 'twitter'
          | 'instagram'
          | 'linkedin'
          | 'discord'
          | 'reddit'
          | 'telegram'
          | 'github'
          | 'youtube'
          | 'tiktok'
          | 'apple'
          | 'android'
          | 'googleplay';
        url: string;
        id?: string | null;
      }[]
    | null;
  navItems?:
    | {
        title: string;
        subNavItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: string | Page;
                } | null;
                section?: string | null;
                url?: string | null;
                label: string;
                iconBefore?: string | null;
                iconAfter?: string | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "themeConfig_select".
 */
export interface ThemeConfigSelect<T extends boolean = true> {
  radius?: T;
  regularColors?:
    | T
    | {
        background?: T;
        foreground?: T;
        card?: T;
        'card-foreground'?: T;
        popover?: T;
        'popover-foreground'?: T;
        primary?: T;
        'primary-foreground'?: T;
        secondary?: T;
        'secondary-foreground'?: T;
        muted?: T;
        'muted-foreground'?: T;
        accent?: T;
        'accent-foreground'?: T;
        destructive?: T;
        'destructive-foreground'?: T;
        border?: T;
        input?: T;
        ring?: T;
        success?: T;
        warning?: T;
        error?: T;
        'chart-1'?: T;
        'chart-2'?: T;
        'chart-3'?: T;
        'chart-4'?: T;
        'chart-5'?: T;
        muted2?: T;
        'muted2-foreground'?: T;
      };
  darkmodeColors?:
    | T
    | {
        enableDarkMode?: T;
        background?: T;
        foreground?: T;
        card?: T;
        'card-foreground'?: T;
        popover?: T;
        'popover-foreground'?: T;
        primary?: T;
        'primary-foreground'?: T;
        secondary?: T;
        'secondary-foreground'?: T;
        muted?: T;
        'muted-foreground'?: T;
        accent?: T;
        'accent-foreground'?: T;
        destructive?: T;
        'destructive-foreground'?: T;
        border?: T;
        input?: T;
        ring?: T;
        success?: T;
        warning?: T;
        error?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  logo?: T;
  items?:
    | T
    | {
        sub?:
          | T
          | {
              icon?: T;
              label?: T;
              subitems?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          section?: T;
                          url?: T;
                          label?: T;
                          iconBefore?: T;
                          iconAfter?: T;
                        };
                    Description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        link?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    section?: T;
                    url?: T;
                    label?: T;
                    iconBefore?: T;
                    iconAfter?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  buttons?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
              iconBefore?: T;
              iconAfter?: T;
              appearance?: T;
              size?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  backgroundColor?: T;
  designVersion?: T;
  logo?: T;
  copyright?: T;
  subline?: T;
  legalLinks?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              section?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        icon?: T;
        url?: T;
        id?: T;
      };
  navItems?:
    | T
    | {
        title?: T;
        subNavItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    section?: T;
                    url?: T;
                    label?: T;
                    iconBefore?: T;
                    iconAfter?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  /**
   * Choose the background color for this section. If left empty, the default color will be used.
   */
  backgroundColor?:
    | (
        | 'background'
        | 'foreground'
        | 'card'
        | 'card-foreground'
        | 'popover'
        | 'popover-foreground'
        | 'primary'
        | 'primary-foreground'
        | 'secondary'
        | 'secondary-foreground'
        | 'muted'
        | 'muted-foreground'
        | 'accent'
        | 'accent-foreground'
        | 'destructive'
        | 'destructive-foreground'
        | 'border'
        | 'input'
        | 'ring'
        | 'success'
        | 'warning'
        | 'error'
        | 'chart-1'
        | 'chart-2'
        | 'chart-3'
        | 'chart-4'
        | 'chart-5'
        | 'muted2'
        | 'muted2-foreground'
        | 'transparent'
      )
    | null;
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}